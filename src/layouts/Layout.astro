---
import { ViewTransitions } from "astro:transitions";
import Header from "../components/Header.astro";
interface Props {
	title: string;
	description?: string;
	showLogo?: boolean;
	active?: string | null;
	background?: string | null;
	thumbnail?: string | null;
}

let { title, description, showLogo, active, background, thumbnail } =
	Astro.props;
showLogo = showLogo ?? true;
background = background ?? "#000";
description = description ?? "";
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" href="/favicon.ico" />
		<meta name="generator" content={Astro.generator} />
		{
			thumbnail && (
				<meta name="twitter:image" content={thumbnail} />
				<meta name="og:image" content={thumbnail} />
			)
		}
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:site" content="thewilliamyao" />
		<meta name="twitter:title" content={title} />
		<meta name="twitter:description" content={description} />
		
		<title>{title}</title>
	</head>
	<body>
		<Header showLogo={showLogo} active={active} />
		<slot />
		<ViewTransitions />
	</body>
</html>
<style is:global define:vars={{ background }}>
	/* Futura-pt */
	@font-face {
		font-family: "futura-pt";
		src: url("/fonts/FuturaPTBold.ttf") format("truetype");
		font-weight: 700;
	}
	@font-face {
		font-family: "futura-pt";
		src: url("/fonts/FuturaPTBook.ttf") format("truetype");
		font-weight: 400;
	}
	@font-face {
		font-family: "futura-pt";
		src: url("/fonts/FuturaPTLight.ttf") format("truetype");
		font-weight: 300;
	}
	@font-face {
		font-family: "futura-pt";
		src: url("/fonts/FuturaPTMedium.ttf") format("truetype");
		font-weight: 500;
	}

	/* Inknut Antiqua */
	@font-face {
		font-family: "Inknut Antiqua";
		src: url("/fonts/InknutAntiqua-Bold.ttf") format("truetype");
		font-weight: 700;
	}

	@font-face {
		font-family: "Inknut Antiqua";
		src: url("/fonts/InknutAntiqua-Light.ttf") format("truetype");
		font-weight: 300;
	}

	@font-face {
		font-family: "Inknut Antiqua";
		src: url("/fonts/InknutAntiqua-Medium.ttf") format("truetype");
		font-weight: 500;
	}

	@font-face {
		font-family: "Inknut Antiqua";
		src: url("/fonts/InknutAntiqua-Regular.ttf") format("truetype");
		font-weight: 400;
	}

	@font-face {
		font-family: "Inknut Antiqua";
		src: url("/fonts/InknutAntiqua-SemiBold.ttf") format("truetype");
		font-weight: 600;
	}

	:root {
		--accent: 136, 58, 234;
		--accent-light: 224, 204, 250;
		--accent-dark: 49, 10, 101;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
	}

	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
	}

	html {
		font-family: "futura-pt", serif;
		background: var(--background);
	}

	body.menu-open {
		overflow: hidden;
	}
	code {
		font-family:
			Menlo,
			Monaco,
			Lucida Console,
			Liberation Mono,
			DejaVu Sans Mono,
			Bitstream Vera Sans Mono,
			Courier New,
			monospace;
	}

	.fadeIn {
		opacity: 0;
		transition-delay: 2s;
		transition: all 1s;
	}

	.scaleIn {
		transform: scale(0.7);
		transition-delay: 2s;
		transition: all 1s;
	}

	.show {
		opacity: 1;
		transform: none;
	}

	@media (prefers-reduced-motion) {
		.fadeIn {
			transition: none;
		}
	}
</style>

<script is:inline>
	document.addEventListener("astro:page-load", () => {
		const hiddenElements = document.querySelectorAll(".fadeIn");
		const observer = new IntersectionObserver((entries) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					entry.target.classList.add("show");
				}
			});
		});

		hiddenElements.forEach((el) => observer.observe(el));
	});

	const warningStyle = "color:red; font-size: 3rem;";
	const descriptionStyle = "font-size: 1.2rem";

	console.log("%cATTENTION!!!", warningStyle);
	console.log(
		"%cThank you for your attention.\nDeveloped by RythonDev: https://rython.dev/",
		descriptionStyle
	);
</script>
