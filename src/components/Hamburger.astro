<div class="z-[70] w-fit">
	<label
		class="hamburger-menu z-[100] right-10 top-10 fixed"
		aria-label="Menu"
		transition:persist
		transition:name="hamburger"
	>
		<span class="top-bun"></span>
		<input type="checkbox" aria-label="Toggle menu" />
		<span class="bottom-bun"></span>
	</label>
	<aside class="sidebar flex z-[70]">
		<nav
			class="flex flex-col justify-center items-center w-full capitalize font-['futura-pt',sans-serif]"
			role="navigation"
		>
			<a
				class="sidebar-url text-3xl px-5 py-2 mt-10 text-center rounded-md text-white hover:text-gray-600 hover:bg-gray-100 transition-colors duration-300 flex flex-row justify-center items-center"
				href="/"
				>Projects <svg
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
					stroke-width="1.5"
					stroke="currentColor"
					class="size-6 mt-1"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						d="m8.25 4.5 7.5 7.5-7.5 7.5"></path>
				</svg>
			</a>
			<a
				class="sidebar-url text-3xl px-5 py-2 mt-10 text-center rounded-md text-white hover:text-gray-600 hover:bg-gray-100 transition-colors duration-300"
				href="/">About</a
			>
		</nav>
	</aside>
</div>

<style>
	:root {
		--bar-width: 35px;
		--bar-height: 2px;
		--hamburger-gap: 6px;
		--foreground: #141414;
		--background: white;
		--hamburger-margin: 20px;
		--animation-timing: 300ms ease;
		--hamburger-height: calc(
			var(--bar-height) * 3 + var(--hamburger-gap) * 2
		);
	}

	.hamburger-menu {
		--x-width: calc(var(--hamburger-height) * 1.41421356237);

		width: fit-content;

		translate: 0 -200px;
		flex-direction: column;

		display: flex;

		gap: var(--hamburger-gap);
		z-index: 100;
		cursor: pointer;

		transition: all var(--animation-timing);
	}

	.hamburger-menu.active {
		padding-right: 0;
	}

	.hamburger-menu input:focus-visible {
		border: 1px solid var(--background);
		box-shadow: 0 0 0 1px var(--foreground);
	}

	.hamburger-menu input,
	.hamburger-menu span {
		content: "";
		width: var(--bar-width);
		height: var(--bar-height);
		background-color: white;
		border-radius: 9999px;
		transform-origin: right center;
		transition:
			opacity var(--animation-timing),
			width var(--animation-timing),
			rotate var(--animation-timing),
			translate var(--animation-timing),
			background-color var(--animation-timing);
	}

	.hamburger-menu input {
		appearance: none;
		padding: 0;
		margin: 0;
		outline: none;
		pointer-events: none;
	}

	.hamburger-menu .top-bun.active {
		rotate: -45deg;
		width: var(--x-width);
		translate: calc(-50% + var(--x-width) / 2) calc(var(--bar-height) / -2);
	}

	.hamburger-menu .bottom-bun.active {
		rotate: 45deg;
		width: var(--x-width);
		translate: calc(-50% + var(--x-width) / 2) calc(var(--bar-height) / 2);
	}

	.hamburger-menu input:checked {
		opacity: 0;
		width: 0;
	}

	.sidebar {
		position: fixed;
		transition: opacity var(--animation-timing);
		transition-delay: 50ms;
		display: none;
		padding: 0.5rem 1rem;
		padding-top: calc(
			var(--hamburger-height) + var(--hamburger-margin) + 1rem
		);
		background-color: var(--foreground);
		color: var(--background);
		z-index: 61;
		width: 100vw;
		min-height: 100vh;
	}

	.sidebar-url {
		display: none;
		transition: all 300ms ease;
		opacity: 0;
		translate: 0 200%;
	}

	/* @media (max-width: 767px) {
		.hamburger-menu {
			display: flex;
		}
	} */
</style>

<script defer is:inline>
	const sidebarURLs = document.querySelectorAll(".sidebar-url");
	const hamburger = document.querySelector(".hamburger-menu");
	const checkbox = document.querySelector("input");
	const sidebar = document.querySelector(".sidebar");
	const topBun = document.querySelector(".top-bun");
	const bottomBun = document.querySelector(".bottom-bun");

	const openSideBar = () => {
		checkbox.checked = true;

		sidebar.style.display = "flex";
		hamburger.classList.add("active");
		topBun.classList.add("active");
		bottomBun.classList.add("active");

		sidebarURLs.forEach((url) => {
			url.style.display = "flex";

			setTimeout(() => {
				url.style.opacity = "100%";
				url.style.translate = "0 0";
			}, 50);
		});
	};

	const closeSideBar = () => {
		checkbox.checked = false;

		hamburger.classList.remove("active");
		topBun.classList.remove("active");
		bottomBun.classList.remove("active");

		sidebarURLs.forEach((url) => {
			url.style.display = "none";

			setTimeout(() => {
				url.style.translate = "0 100%";
				url.style.opacity = "0%";
			}, 50);
		});

		setTimeout(() => {
			sidebar.style.display = "none";
		}, 50);
	};

	// for each sidebar url, if clicked on, uncheck the checkbox
	sidebarURLs.forEach((url) => {
		url.addEventListener("click", () => {
			closeSideBar();
		});
	});

	if (window.innerWidth < 768) {
		hamburger.style.translate = "0 0";
	}

	// if clicked outside of the hamburger menu, close the sidebar
	window.addEventListener("click", (e) => {
		if (
			e.target !== hamburger &&
			e.target !== topBun &&
			e.target !== bottomBun &&
			e.target !== checkbox &&
			e.target !== document.querySelector(".sidebar") &&
			e.target !== document.querySelector(".sidebar nav")
		) {
			closeSideBar();
		}
	});

	// if window is resized, check if it's less than 768px
	window.addEventListener("resize", () => {
		if (window.innerWidth < 768) {
			hamburger.style.translate = "0 0";
		} else {
			hamburger.style.translate = "0 -200px";
			closeSideBar();
		}
	});

	// if checked, translate the sidebar
	checkbox.addEventListener("change", () => {
		if (checkbox.checked) {
			openSideBar();
		} else {
			closeSideBar();
		}
	});
</script>
