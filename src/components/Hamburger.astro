---
type Link = {
	title: string;
	url: string;
};

interface Props {
	links: Link[];
}

const { links } = Astro.props;
---

<div class="z-[70] w-fit">
	<label
		class="hamburger-menu z-[100] right-10 top-10 fixed"
		aria-label="Menu"
		transition:persist
		transition:name="hamburger"
	>
		<span class="top-bun"></span>
		<input type="checkbox" aria-label="Toggle menu" />
		<span class="bottom-bun"></span>
	</label>
	<aside
		id="primary-sidebar"
		class="sidebar flex flex-col justify-between items-center z-[70]"
	>
		<nav
			class="flex flex-col justify-center items-center w-full capitalize font-['futura-pt',sans-serif]"
			role="navigation"
		>
			<button
				class="text-3xl px-5 py-2 mt-10 text-center rounded-md text-white hover:text-gray-600 hover:bg-gray-100 transition-colors duration-300 flex flex-row justify-center items-center"
				aria-label="Projects"
				id="projects-mobile"
				>Projects <svg
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
					stroke-width="1.5"
					stroke="currentColor"
					class="size-6 mt-1"
				>
					<title>Arrow Icon</title>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						d="m8.25 4.5 7.5 7.5-7.5 7.5"></path>
				</svg>
			</button>
			<a
				class="sidebar-url text-3xl px-5 py-2 mt-10 text-center rounded-md text-white hover:text-gray-600 hover:bg-gray-100 transition-colors duration-300"
				href="/about">About</a
			>
			<a
				class="sidebar-url text-3xl px-5 py-2 mt-10 text-center rounded-md text-white hover:text-gray-600 hover:bg-gray-100 transition-colors duration-300"
				href="/resume"
				target="_blank">Resume</a
			>
		</nav>
		<div class="mb-5">
			<div class="flex justify-center items-center gap-10 text-white">
				<img src="/svg/instagram.svg" alt="instagram" width="25" />
				<img src="/svg/vimeo.svg" alt="vimeo" width="25" />
			</div>
		</div>
	</aside>
	<aside id="secondary-sidebar" class="sidebar">
		<nav
			class="flex flex-col justify-center items-center w-full capitalize font-['futura-pt',sans-serif] overflow-y-scroll pb-40"
			role="navigation"
		>
			<button
				class="text-3xl px-5 py-2 mt-10 text-center rounded-md text-white hover:text-gray-600 hover:bg-gray-100 transition-colors duration-300 flex flex-row justify-center items-center"
				aria-label="Projects"
				id="mobile-projects-back"
				><svg
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
					stroke-width="1.5"
					stroke="currentColor"
					class="size-6"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						d="M15.75 19.5 8.25 12l7.5-7.5"></path>
				</svg>
				Back
			</button>

			{
				links.map((link) => (
					<a
						class="sidebar-url text-3xl px-5 py-2 mt-10 text-center rounded-md text-white hover:text-gray-600 hover:bg-gray-100 transition-colors duration-300"
						href={link.url}
					>
						{link.title}
					</a>
				))
			}
		</nav>
	</aside>
</div>

<style>
	:root {
		--bar-width: 35px;
		--bar-height: 2px;
		--hamburger-gap: 6px;
		--foreground: #141414;
		--background: white;
		--hamburger-margin: 20px;
		--animation-timing: 300ms ease;
		--hamburger-height: calc(
			var(--bar-height) * 3 + var(--hamburger-gap) * 2
		);
	}

	.hamburger-menu {
		--x-width: calc(var(--hamburger-height) * 1.41421356237);

		width: fit-content;

		translate: 0 -200px;
		flex-direction: column;

		display: flex;

		gap: var(--hamburger-gap);
		z-index: 100;
		cursor: pointer;

		transition: all var(--animation-timing);
	}

	.hamburger-menu.active {
		padding-right: 0;
	}

	.hamburger-menu input:focus-visible {
		border: 1px solid var(--background);
		box-shadow: 0 0 0 1px var(--foreground);
	}

	.hamburger-menu input,
	.hamburger-menu span {
		content: "";
		width: var(--bar-width);
		height: var(--bar-height);
		background-color: white;
		border-radius: 9999px;
		transform-origin: right center;
		transition:
			opacity var(--animation-timing),
			width var(--animation-timing),
			rotate var(--animation-timing),
			translate var(--animation-timing),
			background-color var(--animation-timing);
	}

	.hamburger-menu input {
		appearance: none;
		padding: 0;
		margin: 0;
		outline: none;
		pointer-events: none;
	}

	.hamburger-menu .top-bun.active {
		rotate: -45deg;
		width: var(--x-width);
		translate: calc(-50% + var(--x-width) / 2) calc(var(--bar-height) / -2);
	}

	.hamburger-menu .bottom-bun.active {
		rotate: 45deg;
		width: var(--x-width);
		translate: calc(-50% + var(--x-width) / 2) calc(var(--bar-height) / 2);
	}

	.hamburger-menu input:checked {
		opacity: 0;
		width: 0;
	}

	.sidebar {
		position: fixed;
		inset: 0;
		transition: all var(--animation-timing);
		/* transition-delay: 50ms; */
		/* display: none; */
		/* opacity: 0; */
		translate: 100% 0;
		padding: 0.5rem 1rem;
		padding-top: calc(
			var(--hamburger-height) + var(--hamburger-margin) + 1rem
		);
		background-color: var(--foreground);
		color: var(--background);
		width: 100%;
		min-height: 100vh;
		overflow-y: scroll;
	}

	#primary-sidebar {
		z-index: 70;
	}

	#secondary-sidebar {
		z-index: 71;
	}

	.sidebar.active {
		/* display: flex; */
		/* opacity: 100%; */
		translate: 0 0;
		position: fixed;
	}
</style>

<script defer is:inline>
	const viewportWidth = 1024;
	document.addEventListener("astro:page-load", () => {
		const sidebarURLs = document.querySelectorAll(".sidebar-url");
		const hamburger = document.querySelector(".hamburger-menu");
		const checkbox = document.querySelector("input");
		const primarySidebar = document.querySelector("#primary-sidebar");
		const secondarySidebar = document.querySelector("#secondary-sidebar");
		const topBun = document.querySelector(".top-bun");
		const bottomBun = document.querySelector(".bottom-bun");

		const openPrimarySidebar = () => {
			document.body.classList.add("menu-open");

			checkbox.checked = true;

			primarySidebar.classList.add("active");
			hamburger.classList.add("active");
			topBun.classList.add("active");
			bottomBun.classList.add("active");
		};

		const openSecondarySidebar = () => {
			document.body.classList.add("menu-open");
			secondarySidebar.classList.add("active");
		};

		const closePrimarySidebar = () => {
			document.body.classList.remove("menu-open");
			checkbox.checked = false;

			hamburger.classList.remove("active");
			topBun.classList.remove("active");
			bottomBun.classList.remove("active");
			primarySidebar.classList.remove("active");
		};

		const closeSecondarySidebar = () => {
			secondarySidebar.classList.remove("active");
		};

		// for each sidebar url, if clicked on, uncheck the checkbox
		sidebarURLs.forEach((url) => {
			url.addEventListener("click", () => {
				closePrimarySidebar();
				checkbox.checked = false;
			});
		});

		if (window.innerWidth < viewportWidth) {
			hamburger.style.translate = "0 0";
		}

		// if clicked outside of the hamburger menu, close the sidebar
		window.addEventListener("click", (e) => {
			if (
				e.target !== hamburger &&
				e.target !== topBun &&
				e.target !== bottomBun &&
				e.target !== checkbox &&
				e.target !== document.querySelector(".sidebar")
			) {
				// closePrimarySidebar();
			}
		});

		// if window is resized, check if it's less than viewportWidthpx
		window.addEventListener("resize", () => {
			if (window.innerWidth < viewportWidth) {
				hamburger.style.translate = "0 0";
			} else {
				hamburger.style.translate = "0 -200px";
				closePrimarySidebar();
			}
		});

		// if checked, translate the sidebar
		checkbox.addEventListener("change", () => {
			if (checkbox.checked) {
				openPrimarySidebar();
			} else {
				closePrimarySidebar();
				closeSecondarySidebar();
			}
		});

		document
			.getElementById("projects-mobile")
			.addEventListener("click", () => {
				openSecondarySidebar();
			});

		document
			.getElementById("projects-mobile")
			.addEventListener("click", () => {
				openSecondarySidebar();
			});

		document
			.getElementById("mobile-projects-back")
			.addEventListener("click", () => {
				closeSecondarySidebar();
			});
	});
</script>
